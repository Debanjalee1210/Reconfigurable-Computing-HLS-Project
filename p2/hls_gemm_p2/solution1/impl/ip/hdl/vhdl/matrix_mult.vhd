-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    prod_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    prod_ce0 : OUT STD_LOGIC;
    prod_we0 : OUT STD_LOGIC;
    prod_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult_matrix_mult,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.343063,HLS_SYN_LAT=2057,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=376,HLS_SYN_LUT=1264,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal icmp_ln10_reg_1335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage7 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_421 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_430 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_449 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_1323 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_493_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_reg_1328 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln10_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_load_reg_1339 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_fu_517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_reg_1344 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_1349 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_reg_1358 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_fu_559_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_reg_1370 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln232_2_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln232_2_reg_1398 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln232_46_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln232_46_reg_1418 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_15_reg_1469 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_cast_fu_726_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_cast_reg_1474 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_cast_fu_738_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_cast_reg_1485 : STD_LOGIC_VECTOR (6 downto 0);
    signal b_load_13_reg_1500 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_1_reg_1505 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_2_reg_1575 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_fu_946_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_1605 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1234_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_1_reg_1620 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_load_14_reg_1635 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_1_reg_1650 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_14_reg_1665 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1242_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_3_reg_1670 : STD_LOGIC_VECTOR (16 downto 0);
    signal a_load_reg_1675 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln886_5_fu_1063_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln886_5_reg_1695 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1259_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_7_reg_1715 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_9_fu_1125_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln886_9_reg_1735 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1276_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_10_reg_1745 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln886_13_fu_1182_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln886_13_reg_1755 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln886_6_fu_1207_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln886_6_reg_1760 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln232_33_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln232_35_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln232_37_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_51_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_53_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_39_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln232_41_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_55_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_57_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_43_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln232_45_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_59_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_61_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_31_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln232_32_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_50_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_52_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_34_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln232_36_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_54_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_56_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_38_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln232_40_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_58_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_60_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_42_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln232_44_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_49_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_62_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_fu_984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_63_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_1213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_fu_969_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln10_1_fu_872_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_120 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln10_1_fu_508_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_411_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln232_fu_489_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln10_fu_523_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln10_2_fu_543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_4_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_416_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_6_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln232_47_fu_587_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln232_1_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln10_8_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_10_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_3_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_4_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_12_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_14_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln232_5_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_2_fu_692_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_1_fu_711_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_3_fu_754_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_5_fu_769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_fu_780_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_cast_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_7_fu_812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_9_fu_823_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_cast_fu_834_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln232_1_fu_846_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_2_fu_858_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_2_fu_858_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_2_fu_858_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln13_fu_877_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln10_11_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln10_31_fu_908_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln10_13_fu_913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln232_48_fu_924_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln232_fu_927_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln232_3_fu_938_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_881_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_4_fu_955_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_4_fu_955_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_4_fu_955_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln232_fu_1000_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln232_4_fu_1005_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_6_fu_1018_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_6_fu_1018_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_6_fu_1018_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_8_fu_1044_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_8_fu_1044_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_8_fu_1044_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1250_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln886_5_fu_1060_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_4_fu_1057_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1540_10_fu_1080_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_10_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_10_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_12_fu_1109_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_12_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_12_fu_1109_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1267_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln886_9_fu_1122_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_8_fu_1119_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1540_14_fu_1137_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_14_fu_1137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_14_fu_1137_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_1_fu_1153_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_1_fu_1153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1540_1_fu_1153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1284_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln886_12_fu_1169_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_11_fu_1166_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln886_12_fu_1172_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_13_fu_1178_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln886_10_fu_1163_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1293_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln886_2_fu_1191_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_1_fu_1188_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln886_2_fu_1194_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln886_6_fu_1204_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln886_3_fu_1200_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln886_14_fu_1220_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln886_7_fu_1217_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln886_14_fu_1223_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1242_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1250_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1250_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1259_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1267_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1276_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1284_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1293_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1293_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1234_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1242_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1250_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1250_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1250_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1259_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1259_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1259_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1267_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1267_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1267_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1276_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1276_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1276_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1284_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1284_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1284_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1293_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1293_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1293_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1540_10_fu_1080_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_10_fu_1080_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_12_fu_1109_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_12_fu_1109_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_14_fu_1137_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_14_fu_1137_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_1_fu_1153_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_1_fu_1153_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_2_fu_858_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_2_fu_858_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_4_fu_955_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_4_fu_955_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_6_fu_1018_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_6_fu_1018_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_8_fu_1044_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1540_8_fu_1044_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_305 : BOOLEAN;
    signal ap_condition_1249 : BOOLEAN;
    signal ap_condition_465 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_mult_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component matrix_mult_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_2_fu_858_p0,
        din1 => mul_ln1540_2_fu_858_p1,
        dout => mul_ln1540_2_fu_858_p2);

    mul_8ns_8ns_16_1_1_U2 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_4_fu_955_p0,
        din1 => mul_ln1540_4_fu_955_p1,
        dout => mul_ln1540_4_fu_955_p2);

    mul_8ns_8ns_16_1_1_U3 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_6_fu_1018_p0,
        din1 => mul_ln1540_6_fu_1018_p1,
        dout => mul_ln1540_6_fu_1018_p2);

    mul_8ns_8ns_16_1_1_U4 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_8_fu_1044_p0,
        din1 => mul_ln1540_8_fu_1044_p1,
        dout => mul_ln1540_8_fu_1044_p2);

    mul_8ns_8ns_16_1_1_U5 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_10_fu_1080_p0,
        din1 => mul_ln1540_10_fu_1080_p1,
        dout => mul_ln1540_10_fu_1080_p2);

    mul_8ns_8ns_16_1_1_U6 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_12_fu_1109_p0,
        din1 => mul_ln1540_12_fu_1109_p1,
        dout => mul_ln1540_12_fu_1109_p2);

    mul_8ns_8ns_16_1_1_U7 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_14_fu_1137_p0,
        din1 => mul_ln1540_14_fu_1137_p1,
        dout => mul_ln1540_14_fu_1137_p2);

    mul_8ns_8ns_16_1_1_U8 : component matrix_mult_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1540_1_fu_1153_p0,
        din1 => mul_ln1540_1_fu_1153_p1,
        dout => mul_ln1540_1_fu_1153_p2);

    mac_muladd_8ns_8ns_16ns_17_4_1_U9 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1234_p0,
        din1 => grp_fu_1234_p1,
        din2 => grp_fu_1234_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U10 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1242_p0,
        din1 => grp_fu_1242_p1,
        din2 => grp_fu_1242_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1242_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U11 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1250_p0,
        din1 => grp_fu_1250_p1,
        din2 => grp_fu_1250_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1250_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U12 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1259_p0,
        din1 => grp_fu_1259_p1,
        din2 => grp_fu_1259_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1259_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U13 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1267_p0,
        din1 => grp_fu_1267_p1,
        din2 => grp_fu_1267_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1267_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U14 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1276_p0,
        din1 => grp_fu_1276_p1,
        din2 => grp_fu_1276_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1276_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U15 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1284_p0,
        din1 => grp_fu_1284_p1,
        din2 => grp_fu_1284_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1284_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U16 : component matrix_mult_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1293_p0,
        din1 => grp_fu_1293_p1,
        din2 => grp_fu_1293_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1293_p3);

    flow_control_loop_pipe_U : component matrix_mult_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage7,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1249)) then 
                    i_fu_116 <= ap_const_lv5_0;
                elsif ((ap_const_boolean_1 = ap_condition_305)) then 
                    i_fu_116 <= select_ln10_1_fu_872_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_465)) then
                if ((icmp_ln10_fu_502_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_120 <= add_ln10_1_fu_508_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_120 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1249)) then 
                    j_fu_112 <= ap_const_lv5_0;
                elsif ((ap_const_boolean_1 = ap_condition_305)) then 
                    j_fu_112 <= add_ln12_fu_969_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                reg_425 <= a_q0;
            elsif ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_425 <= a_q1;
            end if; 
        end if;
    end process;

    reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_434 <= b_q0;
            elsif ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                reg_434 <= b_q1;
            end if; 
        end if;
    end process;

    reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_439 <= b_q1;
            elsif (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_439 <= b_q0;
            end if; 
        end if;
    end process;

    reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_444 <= a_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_444 <= a_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_449 <= a_q1;
            elsif (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_449 <= a_q0;
            end if; 
        end if;
    end process;

    reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                reg_454 <= b_q0;
            elsif ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_454 <= b_q1;
            end if; 
        end if;
    end process;

    reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_459 <= b_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_459 <= b_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_load_14_reg_1635 <= a_q0;
                add_ln886_3_reg_1670 <= grp_fu_1242_p3;
                b_load_14_reg_1665 <= b_q0;
                b_load_1_reg_1650 <= b_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                a_load_15_reg_1469 <= a_q0;
                b_load_13_reg_1500 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                a_load_1_reg_1505 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_load_reg_1675 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_1344 <= add_ln10_fu_517_p2;
                icmp_ln12_reg_1349 <= icmp_ln12_fu_527_p2;
                j_load_reg_1339 <= ap_sig_allocacmp_j_load;
                    tmp_16_cast_reg_1358(7 downto 4) <= tmp_16_cast_fu_534_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln13_reg_1605 <= add_ln13_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln232_2_reg_1398 <= add_ln232_2_fu_602_p2;
                select_ln10_reg_1370 <= select_ln10_fu_559_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln886_10_reg_1745 <= grp_fu_1276_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln886_13_reg_1755 <= add_ln886_13_fu_1182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln886_1_reg_1620 <= grp_fu_1234_p3;
                select_ln10_2_reg_1575 <= grp_fu_411_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln886_5_reg_1695 <= add_ln886_5_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln886_6_reg_1760 <= add_ln886_6_fu_1207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln886_7_reg_1715 <= grp_fu_1259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln886_9_reg_1735 <= add_ln886_9_fu_1125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1323 <= ap_sig_allocacmp_i_1;
                icmp_ln10_reg_1335 <= icmp_ln10_fu_502_p2;
                    tmp_cast_reg_1328(7 downto 4) <= tmp_cast_fu_493_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_421 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_430 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then
                reg_464 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    tmp_33_cast_reg_1474(4 downto 0) <= tmp_33_cast_fu_726_p3(4 downto 0);
                    tmp_34_cast_reg_1485(4 downto 0) <= tmp_34_cast_fu_738_p3(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    zext_ln232_46_reg_1418(4 downto 0) <= zext_ln232_46_fu_635_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_1328(3 downto 0) <= "0000";
    tmp_16_cast_reg_1358(3 downto 0) <= "0000";
    zext_ln232_46_reg_1418(7 downto 5) <= "000";
    tmp_33_cast_reg_1474(5) <= '1';
    tmp_34_cast_reg_1485(6 downto 5) <= "10";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln232_37_fu_582_p1, ap_block_pp0_stage2, zext_ln232_41_fu_630_p1, ap_block_pp0_stage3, zext_ln232_45_fu_677_p1, ap_block_pp0_stage4, zext_ln232_32_fu_717_p1, ap_block_pp0_stage5, zext_ln232_36_fu_775_p1, ap_block_pp0_stage6, zext_ln232_40_fu_829_p1, ap_block_pp0_stage7, zext_ln232_44_fu_919_p1, zext_ln10_fu_984_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_address0 <= zext_ln10_fu_984_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            a_address0 <= zext_ln232_44_fu_919_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            a_address0 <= zext_ln232_40_fu_829_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            a_address0 <= zext_ln232_36_fu_775_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            a_address0 <= zext_ln232_32_fu_717_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            a_address0 <= zext_ln232_45_fu_677_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            a_address0 <= zext_ln232_41_fu_630_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            a_address0 <= zext_ln232_37_fu_582_p1(8 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, zext_ln232_33_fu_549_p1, ap_block_pp0_stage0, zext_ln232_35_fu_571_p1, ap_block_pp0_stage1, zext_ln232_39_fu_619_p1, ap_block_pp0_stage2, zext_ln232_43_fu_666_p1, ap_block_pp0_stage3, zext_ln232_31_fu_706_p1, ap_block_pp0_stage4, zext_ln232_34_fu_760_p1, ap_block_pp0_stage5, zext_ln232_38_fu_818_p1, ap_block_pp0_stage6, zext_ln232_42_fu_903_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                a_address1 <= zext_ln232_42_fu_903_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                a_address1 <= zext_ln232_38_fu_818_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                a_address1 <= zext_ln232_34_fu_760_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_address1 <= zext_ln232_31_fu_706_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                a_address1 <= zext_ln232_43_fu_666_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address1 <= zext_ln232_39_fu_619_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address1 <= zext_ln232_35_fu_571_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address1 <= zext_ln232_33_fu_549_p1(8 - 1 downto 0);
            else 
                a_address1 <= "XXXXXXXX";
            end if;
        else 
            a_address1 <= "XXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_1_fu_508_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln10_fu_517_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    add_ln12_fu_969_p2 <= std_logic_vector(unsigned(select_ln10_reg_1370) + unsigned(ap_const_lv5_1));
    add_ln13_fu_946_p2 <= std_logic_vector(unsigned(tmp_s_fu_881_p3) + unsigned(zext_ln232_46_reg_1418));
    add_ln232_1_fu_591_p2 <= std_logic_vector(unsigned(zext_ln232_47_fu_587_p1) + unsigned(ap_const_lv7_30));
    add_ln232_2_fu_602_p2 <= std_logic_vector(unsigned(zext_ln232_47_fu_587_p1) + unsigned(ap_const_lv7_50));
    add_ln232_3_fu_638_p2 <= std_logic_vector(unsigned(zext_ln232_46_fu_635_p1) + unsigned(ap_const_lv8_70));
    add_ln232_4_fu_649_p2 <= std_logic_vector(unsigned(zext_ln232_46_fu_635_p1) + unsigned(ap_const_lv8_90));
    add_ln232_5_fu_682_p2 <= std_logic_vector(unsigned(zext_ln232_46_reg_1418) + unsigned(ap_const_lv8_B0));
    add_ln232_fu_927_p2 <= std_logic_vector(unsigned(zext_ln232_48_fu_924_p1) + unsigned(ap_const_lv6_10));
    add_ln886_12_fu_1172_p2 <= std_logic_vector(unsigned(zext_ln886_12_fu_1169_p1) + unsigned(zext_ln886_11_fu_1166_p1));
    add_ln886_13_fu_1182_p2 <= std_logic_vector(unsigned(zext_ln886_13_fu_1178_p1) + unsigned(zext_ln886_10_fu_1163_p1));
    add_ln886_14_fu_1223_p2 <= std_logic_vector(unsigned(zext_ln886_14_fu_1220_p1) + unsigned(zext_ln886_7_fu_1217_p1));
    add_ln886_2_fu_1194_p2 <= std_logic_vector(unsigned(zext_ln886_2_fu_1191_p1) + unsigned(zext_ln886_1_fu_1188_p1));
    add_ln886_5_fu_1063_p2 <= std_logic_vector(unsigned(zext_ln886_5_fu_1060_p1) + unsigned(zext_ln886_4_fu_1057_p1));
    add_ln886_6_fu_1207_p2 <= std_logic_vector(unsigned(zext_ln886_6_fu_1204_p1) + unsigned(zext_ln886_3_fu_1200_p1));
    add_ln886_9_fu_1125_p2 <= std_logic_vector(unsigned(zext_ln886_9_fu_1122_p1) + unsigned(zext_ln886_8_fu_1119_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1249_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_1249 <= ((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_305_assign_proc : process(ap_CS_fsm_pp0_stage7, icmp_ln10_reg_1335, ap_block_pp0_stage7_11001)
    begin
                ap_condition_305 <= ((icmp_ln10_reg_1335 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7));
    end process;


    ap_condition_465_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_465 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone, icmp_ln10_reg_1335)
    begin
        if (((icmp_ln10_reg_1335 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage7;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_116)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_120)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_112, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_112;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln232_53_fu_608_p1, ap_block_pp0_stage2, zext_ln232_57_fu_655_p1, ap_block_pp0_stage3, zext_ln232_61_fu_695_p1, ap_block_pp0_stage4, zext_ln232_52_fu_745_p1, ap_block_pp0_stage5, zext_ln232_56_fu_795_p1, ap_block_pp0_stage6, zext_ln232_60_fu_849_p1, ap_block_pp0_stage7, zext_ln232_62_fu_941_p1, zext_ln232_63_fu_1009_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_address0 <= zext_ln232_63_fu_1009_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            b_address0 <= zext_ln232_62_fu_941_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            b_address0 <= zext_ln232_60_fu_849_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            b_address0 <= zext_ln232_56_fu_795_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            b_address0 <= zext_ln232_52_fu_745_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            b_address0 <= zext_ln232_61_fu_695_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            b_address0 <= zext_ln232_57_fu_655_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            b_address0 <= zext_ln232_53_fu_608_p1(8 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln232_51_fu_597_p1, ap_block_pp0_stage2, zext_ln232_55_fu_644_p1, ap_block_pp0_stage3, zext_ln232_59_fu_687_p1, ap_block_pp0_stage4, zext_ln232_50_fu_733_p1, ap_block_pp0_stage5, zext_ln232_54_fu_783_p1, ap_block_pp0_stage6, zext_ln232_58_fu_841_p1, ap_block_pp0_stage7, zext_ln232_49_fu_933_p1, j_cast_fu_996_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_address1 <= j_cast_fu_996_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            b_address1 <= zext_ln232_49_fu_933_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            b_address1 <= zext_ln232_58_fu_841_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            b_address1 <= zext_ln232_54_fu_783_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            b_address1 <= zext_ln232_50_fu_733_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            b_address1 <= zext_ln232_59_fu_687_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            b_address1 <= zext_ln232_55_fu_644_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            b_address1 <= zext_ln232_51_fu_597_p1(8 - 1 downto 0);
        else 
            b_address1 <= "XXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1234_p0 <= grp_fu_1234_p00(8 - 1 downto 0);
    grp_fu_1234_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_434),16));
    grp_fu_1234_p1 <= grp_fu_1234_p10(8 - 1 downto 0);
    grp_fu_1234_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_421),16));
    grp_fu_1234_p2 <= grp_fu_1234_p20(16 - 1 downto 0);
    grp_fu_1234_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_2_fu_858_p2),17));
    grp_fu_1242_p0 <= grp_fu_1242_p00(8 - 1 downto 0);
    grp_fu_1242_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_439),16));
    grp_fu_1242_p1 <= grp_fu_1242_p10(8 - 1 downto 0);
    grp_fu_1242_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_425),16));
    grp_fu_1242_p2 <= grp_fu_1242_p20(16 - 1 downto 0);
    grp_fu_1242_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_4_fu_955_p2),17));
    grp_fu_1250_p0 <= grp_fu_1250_p00(8 - 1 downto 0);
    grp_fu_1250_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_454),16));
    grp_fu_1250_p1 <= grp_fu_1250_p10(8 - 1 downto 0);
    grp_fu_1250_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_430),16));
    grp_fu_1250_p2 <= grp_fu_1250_p20(16 - 1 downto 0);
    grp_fu_1250_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_6_fu_1018_p2),17));
    grp_fu_1259_p0 <= grp_fu_1259_p00(8 - 1 downto 0);
    grp_fu_1259_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_459),16));
    grp_fu_1259_p1 <= grp_fu_1259_p10(8 - 1 downto 0);
    grp_fu_1259_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_444),16));
    grp_fu_1259_p2 <= grp_fu_1259_p20(16 - 1 downto 0);
    grp_fu_1259_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_8_fu_1044_p2),17));
    grp_fu_1267_p0 <= grp_fu_1267_p00(8 - 1 downto 0);
    grp_fu_1267_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_434),16));
    grp_fu_1267_p1 <= grp_fu_1267_p10(8 - 1 downto 0);
    grp_fu_1267_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_449),16));
    grp_fu_1267_p2 <= grp_fu_1267_p20(16 - 1 downto 0);
    grp_fu_1267_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_10_fu_1080_p2),17));
    grp_fu_1276_p0 <= grp_fu_1276_p00(8 - 1 downto 0);
    grp_fu_1276_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_13_reg_1500),16));
    grp_fu_1276_p1 <= grp_fu_1276_p10(8 - 1 downto 0);
    grp_fu_1276_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_421),16));
    grp_fu_1276_p2 <= grp_fu_1276_p20(16 - 1 downto 0);
    grp_fu_1276_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_12_fu_1109_p2),17));
    grp_fu_1284_p0 <= grp_fu_1284_p00(8 - 1 downto 0);
    grp_fu_1284_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_434),16));
    grp_fu_1284_p1 <= grp_fu_1284_p10(8 - 1 downto 0);
    grp_fu_1284_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_15_reg_1469),16));
    grp_fu_1284_p2 <= grp_fu_1284_p20(16 - 1 downto 0);
    grp_fu_1284_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_14_fu_1137_p2),17));
    grp_fu_1293_p0 <= grp_fu_1293_p00(8 - 1 downto 0);
    grp_fu_1293_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_454),16));
    grp_fu_1293_p1 <= grp_fu_1293_p10(8 - 1 downto 0);
    grp_fu_1293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_reg_1675),16));
    grp_fu_1293_p2 <= grp_fu_1293_p20(16 - 1 downto 0);
    grp_fu_1293_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1540_1_fu_1153_p2),17));

    grp_fu_411_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, icmp_ln12_fu_527_p2, icmp_ln12_reg_1349, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_411_p0 <= icmp_ln12_reg_1349;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_411_p0 <= icmp_ln12_fu_527_p2;
        else 
            grp_fu_411_p0 <= "X";
        end if; 
    end process;


    grp_fu_411_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, tmp_16_cast_fu_534_p3, tmp_16_cast_reg_1358, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_411_p1 <= tmp_16_cast_reg_1358;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_411_p1 <= tmp_16_cast_fu_534_p3;
        else 
            grp_fu_411_p1 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_411_p2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, tmp_cast_fu_493_p3, tmp_cast_reg_1328, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_411_p2 <= tmp_cast_reg_1328;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_411_p2 <= tmp_cast_fu_493_p3;
        else 
            grp_fu_411_p2 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_411_p3 <= 
        grp_fu_411_p1 when (grp_fu_411_p0(0) = '1') else 
        grp_fu_411_p2;
    grp_fu_416_p3 <= 
        tmp_16_cast_reg_1358 when (icmp_ln12_reg_1349(0) = '1') else 
        tmp_cast_reg_1328;
    icmp_ln10_fu_502_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_100) else "0";
    icmp_ln12_fu_527_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_10) else "0";
    j_cast_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_1370),64));
    mul_ln1540_10_fu_1080_p0 <= mul_ln1540_10_fu_1080_p00(8 - 1 downto 0);
    mul_ln1540_10_fu_1080_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_459),16));
    mul_ln1540_10_fu_1080_p1 <= mul_ln1540_10_fu_1080_p10(8 - 1 downto 0);
    mul_ln1540_10_fu_1080_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_444),16));
    mul_ln1540_12_fu_1109_p0 <= mul_ln1540_12_fu_1109_p00(8 - 1 downto 0);
    mul_ln1540_12_fu_1109_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),16));
    mul_ln1540_12_fu_1109_p1 <= mul_ln1540_12_fu_1109_p10(8 - 1 downto 0);
    mul_ln1540_12_fu_1109_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_449),16));
    mul_ln1540_14_fu_1137_p0 <= mul_ln1540_14_fu_1137_p00(8 - 1 downto 0);
    mul_ln1540_14_fu_1137_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_14_reg_1665),16));
    mul_ln1540_14_fu_1137_p1 <= mul_ln1540_14_fu_1137_p10(8 - 1 downto 0);
    mul_ln1540_14_fu_1137_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_14_reg_1635),16));
    mul_ln1540_1_fu_1153_p0 <= mul_ln1540_1_fu_1153_p00(8 - 1 downto 0);
    mul_ln1540_1_fu_1153_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_1_reg_1650),16));
    mul_ln1540_1_fu_1153_p1 <= mul_ln1540_1_fu_1153_p10(8 - 1 downto 0);
    mul_ln1540_1_fu_1153_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_1_reg_1505),16));
    mul_ln1540_2_fu_858_p0 <= mul_ln1540_2_fu_858_p00(8 - 1 downto 0);
    mul_ln1540_2_fu_858_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_439),16));
    mul_ln1540_2_fu_858_p1 <= mul_ln1540_2_fu_858_p10(8 - 1 downto 0);
    mul_ln1540_2_fu_858_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_425),16));
    mul_ln1540_4_fu_955_p0 <= mul_ln1540_4_fu_955_p00(8 - 1 downto 0);
    mul_ln1540_4_fu_955_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_464),16));
    mul_ln1540_4_fu_955_p1 <= mul_ln1540_4_fu_955_p10(8 - 1 downto 0);
    mul_ln1540_4_fu_955_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_425),16));
    mul_ln1540_6_fu_1018_p0 <= mul_ln1540_6_fu_1018_p00(8 - 1 downto 0);
    mul_ln1540_6_fu_1018_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_439),16));
    mul_ln1540_6_fu_1018_p1 <= mul_ln1540_6_fu_1018_p10(8 - 1 downto 0);
    mul_ln1540_6_fu_1018_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_430),16));
    mul_ln1540_8_fu_1044_p0 <= mul_ln1540_8_fu_1044_p00(8 - 1 downto 0);
    mul_ln1540_8_fu_1044_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_454),16));
    mul_ln1540_8_fu_1044_p1 <= mul_ln1540_8_fu_1044_p10(8 - 1 downto 0);
    mul_ln1540_8_fu_1044_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_425),16));
    or_ln10_10_fu_624_p2 <= (grp_fu_416_p3 or ap_const_lv8_B);
    or_ln10_11_fu_897_p2 <= (grp_fu_416_p3 or ap_const_lv8_C);
    or_ln10_12_fu_660_p2 <= (grp_fu_411_p3 or ap_const_lv8_D);
    or_ln10_13_fu_913_p2 <= (select_ln10_31_fu_908_p3 or ap_const_lv8_E);
    or_ln10_14_fu_671_p2 <= (grp_fu_416_p3 or ap_const_lv8_F);
    or_ln10_1_fu_711_p2 <= (grp_fu_416_p3 or ap_const_lv8_2);
    or_ln10_2_fu_543_p2 <= (grp_fu_411_p3 or ap_const_lv8_3);
    or_ln10_3_fu_754_p2 <= (grp_fu_411_p3 or ap_const_lv8_4);
    or_ln10_4_fu_565_p2 <= (grp_fu_411_p3 or ap_const_lv8_5);
    or_ln10_5_fu_769_p2 <= (grp_fu_416_p3 or ap_const_lv8_6);
    or_ln10_6_fu_576_p2 <= (grp_fu_416_p3 or ap_const_lv8_7);
    or_ln10_7_fu_812_p2 <= (grp_fu_411_p3 or ap_const_lv8_8);
    or_ln10_8_fu_613_p2 <= (grp_fu_411_p3 or ap_const_lv8_9);
    or_ln10_9_fu_823_p2 <= (grp_fu_416_p3 or ap_const_lv8_A);
    or_ln10_fu_700_p2 <= (grp_fu_411_p3 or ap_const_lv8_1);
    prod_address0 <= zext_ln13_fu_1213_p1(8 - 1 downto 0);

    prod_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_14_fu_1223_p2),32));

    prod_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln10_1_fu_872_p3 <= 
        add_ln10_reg_1344 when (icmp_ln12_reg_1349(0) = '1') else 
        i_1_reg_1323;
    select_ln10_31_fu_908_p3 <= 
        tmp_16_cast_reg_1358 when (icmp_ln12_reg_1349(0) = '1') else 
        tmp_cast_reg_1328;
    select_ln10_fu_559_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_reg_1349(0) = '1') else 
        j_load_reg_1339;
        sext_ln232_1_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_cast_reg_1485),8));

        sext_ln232_2_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln232_2_reg_1398),8));

        sext_ln232_3_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_cast_reg_1474),8));

        sext_ln232_4_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln232_fu_1000_p2),8));

        sext_ln232_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_cast_reg_1474),7));

    tmp_16_cast_fu_534_p3 <= (trunc_ln10_fu_523_p1 & ap_const_lv4_0);
    tmp_33_cast_fu_726_p3 <= (ap_const_lv1_1 & select_ln10_reg_1370);
    tmp_34_cast_fu_738_p3 <= (ap_const_lv2_2 & select_ln10_reg_1370);
    tmp_36_cast_fu_788_p3 <= (ap_const_lv3_4 & select_ln10_reg_1370);
    tmp_37_cast_fu_834_p3 <= (ap_const_lv3_5 & select_ln10_reg_1370);
    tmp_cast_fu_493_p3 <= (trunc_ln232_fu_489_p1 & ap_const_lv4_0);
    tmp_s_fu_881_p3 <= (trunc_ln13_fu_877_p1 & ap_const_lv4_0);
    trunc_ln10_fu_523_p1 <= add_ln10_fu_517_p2(4 - 1 downto 0);
    trunc_ln13_fu_877_p1 <= select_ln10_1_fu_872_p3(4 - 1 downto 0);
    trunc_ln232_fu_489_p1 <= ap_sig_allocacmp_i_1(4 - 1 downto 0);
    xor_ln232_fu_1000_p2 <= (select_ln10_reg_1370 xor ap_const_lv5_10);
    zext_ln10_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_2_reg_1575),64));
    zext_ln13_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_1605),64));
    zext_ln232_31_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_fu_700_p2),64));
    zext_ln232_32_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_1_fu_711_p2),64));
    zext_ln232_33_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_2_fu_543_p2),64));
    zext_ln232_34_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_3_fu_754_p2),64));
    zext_ln232_35_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_4_fu_565_p2),64));
    zext_ln232_36_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_5_fu_769_p2),64));
    zext_ln232_37_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_6_fu_576_p2),64));
    zext_ln232_38_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_7_fu_812_p2),64));
    zext_ln232_39_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_8_fu_613_p2),64));
    zext_ln232_40_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_9_fu_823_p2),64));
    zext_ln232_41_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_10_fu_624_p2),64));
    zext_ln232_42_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_11_fu_897_p2),64));
    zext_ln232_43_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_12_fu_660_p2),64));
    zext_ln232_44_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_13_fu_913_p2),64));
    zext_ln232_45_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln10_14_fu_671_p2),64));
    zext_ln232_46_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_1370),8));
    zext_ln232_47_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_fu_559_p3),7));
    zext_ln232_48_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln10_reg_1370),6));
    zext_ln232_49_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_fu_927_p2),64));
    zext_ln232_50_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_cast_fu_726_p3),64));
    zext_ln232_51_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_1_fu_591_p2),64));
    zext_ln232_52_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_cast_fu_738_p3),64));
    zext_ln232_53_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_2_fu_602_p2),64));
    zext_ln232_54_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_fu_780_p1),64));
    zext_ln232_55_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_3_fu_638_p2),64));
    zext_ln232_56_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_cast_fu_788_p3),64));
    zext_ln232_57_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_4_fu_649_p2),64));
    zext_ln232_58_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_cast_fu_834_p3),64));
    zext_ln232_59_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_5_fu_682_p2),64));
    zext_ln232_60_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_1_fu_846_p1),64));
    zext_ln232_61_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_2_fu_692_p1),64));
    zext_ln232_62_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_3_fu_938_p1),64));
    zext_ln232_63_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln232_4_fu_1005_p1),64));
    zext_ln886_10_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_9_reg_1735),19));
    zext_ln886_11_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_10_reg_1745),18));
    zext_ln886_12_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1284_p3),18));
    zext_ln886_13_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_12_fu_1172_p2),19));
    zext_ln886_14_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_13_reg_1755),20));
    zext_ln886_1_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1293_p3),18));
    zext_ln886_2_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_1_reg_1620),18));
    zext_ln886_3_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_2_fu_1194_p2),19));
    zext_ln886_4_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_3_reg_1670),18));
    zext_ln886_5_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1250_p3),18));
    zext_ln886_6_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_5_reg_1695),19));
    zext_ln886_7_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_6_reg_1760),20));
    zext_ln886_8_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_7_reg_1715),18));
    zext_ln886_9_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1267_p3),18));
end behav;
